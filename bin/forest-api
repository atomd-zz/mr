# -*- coding: utf-8 -*-

'''
Forest API Server. An OpenStack ReST API to Forest.
'''

import eventlet
eventlet.monkey_patch(os=False)

import os
import sys
import traceback
from oslo.config import cfg
from openstack.common import log as logging

# If ../forest/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(
    sys.argv[0]), os.pardir, os.pardir))
if os.path.exists(os.path.join(possible_topdir, "forest", "__init__.py")):
    sys.path.insert(0, possible_topdir)


from openstack.common import service
from openstack.common import wsgi
from forest import config

CONF = cfg.CONF
LOG = logging.getLogger('forest.api')


if __name__ == '__main__':

    try:
        project = 'forest'
        config.parse_api_config(sys.argv, project=project)
        logging.setup(project)

        launcher = service.ProcessLauncher()
        # Obtain the parameters
        app = config.load_paste_app()
        port = CONF.forest_api_listen_port
        host = CONF.forest_api_listen
        backlog = CONF.forest_api_listen_backlog
        threads = CONF.forest_api_listen_threads
        workers = CONF.forest_api_workers
        # Launch services
        server = wsgi.Service(app, port, host, backlog, threads)
        launcher.launch_service(server,workers=workers or 1)
        LOG.info('Starting Forest API on %s:%s' % (host, port))
        launcher.wait()

    except RuntimeError, e:
        sys.exit('ERROR: %s' % e)
